1. Что такое props и можно ли использовать props в функциональных компонентах?
- props (от англ. properties - свойства) - JSX-атрибуты, передаваемые в компонеты.
Используются для настройки поведения и внешнего вида компонента.
Могут быть использованы в функциональных компонентах (как аргументы в функциях).

2. Нужно ли выделять в отдельный компонент статью в блоге?
- Строгих правил на этот счет нет, и всё зависит от виденья разработчика.
Но я считаю, что статью нужно выделить в компонет, т.к. она является логически цельной (и, скорее всего, переиспользуемой) частью приложения.

3. Можно ли использовать React без JSX?
- Да, но это не так удобно и наглядно

4. Чем отличается JSX от HTML?
1) JSX — это расширение синтаксиса для JavaScript, а HTML — это язык разметки.
2) JSX позволяет включать выражения и функции в синтаксис, а HTML позволяет использовать только статический текст.
3) JSX обычно используется в приложениях React, а HTML используется для создания веб-страниц.
4) компоненты JSX могут иметь состояния и реквизиты, а элементы HTML — нет.
5) className вместо class
6) использование "усов" (фигурных скобок) с переменными
7) атрибут style в JSX - только объект
8) htmlFor вместо for (зарезервированное слово в JS) etc.

5. Для чего нам нужны свойства (props) компонентов? 
- для настройки поведения и внешнего вида компонента

6. В примере с CardList чем можно было бы заменить <React.Fragment>?
- любым подходящим для этого тегом или <></>

7. Можно ли сказать, что классовые и функциональные компоненты равнозначны по функциональности?
- с точки зрения React эти два компонента эквивалентны. Но у каждого из них есть свои особенности.

8. Можно ли полностью описать приложение, используя только функциональные компоненты? 
- учитывая равнозначность классовых и функциональных компонентов, да, можно

9. Какой командой мы делаем экспорт компонента для возможности его использования в других местах приложения? 
- export default названиеКомпонента

10. Изучите структуру компонент в проекте https://github.com/alisa-tsvetkova/EthereumUI и напишите, какой именно компонент является самым верхним, а какой самым «глубоким»?
- верхнеуровневый - App (если считать его тоже), если нет - Router. Самый "глубокий" - Block

11. Какой командой можно сгенерировать разметку/компоненты на основе заранее заданного массива элементов? Приведите пример. 
- отличный пример реализации - текущее домашнее задание (файл App.js)